#!/usr/bin/env python

import unittest

def find_start(a, val, l, r, level=0):

#    print "%s%s %s" % ('    ' * level, l, r)

    if r < l:
        return -1

    if r == l:
        if a[l] == val:
            return l
        return -1

    m = (l + r) / 2

    if a[m] == val:
        # eureka.  wind back until we don't see val
        while m > 0:
            if a[m - 1] != val:
                break
            m -= 1
        return m

    if a[m] < val:
        return find_start(a, val, m + 1, r, level + 1)

    # a[m] > val
    return find_start(a, val, l, m - 1, level + 1)


def solution(a, val):
    l = find_start(a, val, 0, len(a) - 1)
    if l == -1:
        return [-1, -1]

    r = l

    while True:
        if r < len(a):
            if r + 1 < len(a):
                if a[r + 1] == val:
                    r += 1
                    continue

                break
            break
        break

    return [l, r]

class MyTest(unittest.TestCase):

    def setUp(self):
        self.a = [5,7,7,8,8,10]

    def test1(self):
        v = 9
        r = solution(self.a, v)
        self.assertEqual([-1, -1], r)

    def test2(self):
        v = 22
        r = solution(self.a, v)
        self.assertEqual([-1, -1], r)

    def test3(self):
        v = 0
        r = solution(self.a, v)
        self.assertEqual([-1, -1], r)

    def test4(self):
        v = 7
        r = solution(self.a, v)
        self.assertEqual([1, 2], r)

    def test5(self):
        v = 10
        r = solution(self.a, v)
        self.assertEqual([5, 5], r)

    def test6(self):
        v = 5
        r = solution(self.a, v)
        self.assertEqual([0, 0], r)

    def testall(self):
        a = [2,2,2,2,2,2]
        v = 2
        self.assertEqual([0, 5], solution(a, v))

    def testnone(self):
        a = [2,2,2,2,2,2]
        v = 4
        self.assertEqual([-1, -1], solution(a, v))

    def testempty(self):
        a = []
        v = 4
        self.assertEqual([-1, -1], solution(a, v))
